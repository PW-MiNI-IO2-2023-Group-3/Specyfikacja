{
  "openapi": "3.0.3",
  "info": {
    "title": "System rezerwacji miejsc na eventy",
    "description": "Niniejsza dokumentacja stanowi opis REST API implemtowanego przez serwer centralny. Endpointy ",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "XXX@pw.edu.pl"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://yourbackenhosting.edu.pl"
    }
  ],
  "tags": [
    {
      "name": "Event organizer",
      "description": "API for web organizer portal"
    },
    {
      "name": "Event",
      "description": "All about Event"
    },
    {
      "name": "Categories",
      "description": "All about Categories"
    },
    {
      "name": "Reservation",
      "description": "All about Reservation"
    }
  ],
  "paths": {
    "/events": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Return list of all events",
        "operationId": "getEvents",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Add new event",
        "operationId": "addEvent",
        "requestBody": {
          "description": "Add event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventForm"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "event created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "description": "event can not be created, field invalid"
          },
          "403": {
            "description": "invalid session"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/events/my": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Return list of events made by organizer, according to session",
        "operationId": "getMyEvents",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "403": {
            "description": "invalid session"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/events/{id}": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Find event by ID",
        "description": "Returns a single event",
        "operationId": "getEventById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of event to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventWithPlaces"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Event"
        ],
        "summary": "Cancel event",
        "operationId": "cancelEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "403": {
            "description": "invalid session"
          },
          "404": {
            "description": "id not found"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Event"
        ],
        "summary": "patch existing event",
        "operationId": "patchEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "nothing to do, no field to patch"
          },
          "202": {
            "description": "patched"
          },
          "400": {
            "description": "invalid id or fields in body"
          },
          "403": {
            "description": "invalid session"
          },
          "404": {
            "description": "id not found"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/events/{id}/photos": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get list of photo of event",
        "description": "Returns a list of photo paths",
        "operationId": "getPhoto",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of event to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "path_to_photo1",
                    "path_to_photo2",
                    "path_to_photo3"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Event"
        ],
        "summary": "Cancel event",
        "operationId": "deletePhoto",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "header",
            "description": "path of photo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "403": {
            "description": "invalid session"
          },
          "404": {
            "description": "id or path not found"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "patch existing event",
        "operationId": "putPhoto",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "header",
            "description": "path of photo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "path added"
          },
          "400": {
            "description": "path already exist"
          },
          "403": {
            "description": "invalid session"
          },
          "404": {
            "description": "id not found"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/events/getByCategory": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Return list of all events in category",
        "operationId": "getByCategory",
        "parameters": [
          {
            "name": "categoryId",
            "in": "header",
            "description": "ID of category",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid category ID supplied"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Return list of all categories",
        "operationId": "getCategories",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create new category",
        "operationId": "addCategories",
        "parameters": [
          {
            "name": "categoryName",
            "in": "header",
            "description": "name of category",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "category already exist"
          },
          "403": {
            "description": "invalid session"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/reservation": {
      "post": {
        "tags": [
          "Reservation"
        ],
        "summary": "Create new reservation",
        "operationId": "makeReservation",
        "parameters": [
          {
            "name": "eventId",
            "in": "header",
            "description": "ID of event",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "placeID",
            "in": "header",
            "description": "ID of place",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationDTO"
                }
              }
            }
          },
          "400": {
            "description": "no free place or place taken"
          },
          "404": {
            "description": "event not exist or done"
          }
        }
      },
      "delete": {
        "tags": [
          "Reservation"
        ],
        "summary": "Create new reservation",
        "operationId": "deleteReservation",
        "parameters": [
          {
            "name": "reservationToken",
            "in": "header",
            "description": "token of reservation",
            "required": true,
            "schema": {
              "type": "string",
              "example": "df0d69cbe68fb6e2b27aa88f6f94497e"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "404": {
            "description": "token not found"
          }
        }
      }
    },
    "/organizer": {
      "post": {
        "tags": [
          "Event organizer"
        ],
        "summary": "Create orginizer account",
        "operationId": "signUp",
        "requestBody": {
          "description": "Add event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizerForm"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organizer"
                }
              }
            }
          },
          "400": {
            "description": "email already in use"
          }
        }
      },
      "get": {
        "tags": [
          "Event organizer"
        ],
        "summary": "Get organizer account (my account)",
        "operationId": "getOrganizer",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organizer"
                }
              }
            }
          },
          "403": {
            "description": "invalid session"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/organizer/{id}": {
      "post": {
        "tags": [
          "Event organizer"
        ],
        "summary": "Confirm orginizer account",
        "operationId": "confirm",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of Organizer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "header",
            "description": "code from email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "nothing to do, account already confirmed"
          },
          "202": {
            "description": "account confirmed"
          },
          "400": {
            "description": "code wrong"
          },
          "404": {
            "description": "organizer id not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Event organizer"
        ],
        "summary": "Confirm orginizer account",
        "operationId": "deleteOrganizer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of Organizer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "403": {
            "description": "invalid session"
          },
          "404": {
            "description": "id not found"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Event organizer"
        ],
        "summary": "Patch orginizer account",
        "operationId": "patchOrganizer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of Organizer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizerPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "nothing to do, no field to patch"
          },
          "202": {
            "description": "patched"
          },
          "400": {
            "description": "invalid email or password"
          },
          "403": {
            "description": "invalid session"
          },
          "404": {
            "description": "id not found"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/organizer/login": {
      "get": {
        "tags": [
          "Event organizer"
        ],
        "summary": "Logs organizer into the system",
        "description": "",
        "operationId": "loginOrganizer",
        "parameters": [
          {
            "name": "email",
            "in": "header",
            "description": "The organizer email for login",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "header",
            "description": "the password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sessionToken": {
                      "type": "string",
                      "description": "The session token."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid email or password"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Event": {
        "required": [
          "id",
          "title",
          "name",
          "startTime",
          "endTime",
          "latitude",
          "longitude",
          "maxPlace",
          "categories",
          "status",
          "freePlace"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "title": {
            "type": "string",
            "example": "Short description of Event"
          },
          "startTime": {
            "type": "integer",
            "format": "int64",
            "example": 1673034164
          },
          "endTime": {
            "type": "integer",
            "format": "int64",
            "example": 1683034164
          },
          "latitude": {
            "type": "string",
            "example": "40.4775315"
          },
          "longitude": {
            "type": "string",
            "example": "-3.7051359"
          },
          "name": {
            "type": "string",
            "example": "Long description of Event"
          },
          "status": {
            "$ref": "#/components/schemas/EventStatus"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "freePlace": {
            "type": "integer",
            "format": "int64",
            "example": 2
          },
          "maxPlace": {
            "type": "integer",
            "format": "int64",
            "example": 100
          }
        }
      },
      "EventWithPlaces": {
        "required": [
          "id",
          "title",
          "name",
          "startTime",
          "endTime",
          "latitude",
          "longitude",
          "maxPlace",
          "categories",
          "status",
          "freePlace",
          "places"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "title": {
            "type": "string",
            "example": "Short description of Event"
          },
          "startTime": {
            "type": "integer",
            "format": "int64",
            "example": 1673034164
          },
          "endTime": {
            "type": "integer",
            "format": "int64",
            "example": 1683034164
          },
          "latitude": {
            "type": "string",
            "example": "40.4775315"
          },
          "longitude": {
            "type": "string",
            "example": "-3.7051359"
          },
          "name": {
            "type": "string",
            "example": "Long description of Event"
          },
          "status": {
            "$ref": "#/components/schemas/EventStatus"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "freePlace": {
            "type": "integer",
            "format": "int64",
            "example": 2
          },
          "maxPlace": {
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "places": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Place"
            }
          },
          "placeSchema": {
            "type": "string",
            "example": "Seralized place schema"
          }
        }
      },
      "EventForm": {
        "type": "object",
        "required": [
          "title",
          "name",
          "startTime",
          "endTime",
          "latitude",
          "longitude",
          "maxPlace",
          "categoriesIds"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "Short description of Event"
          },
          "name": {
            "type": "string",
            "example": "Long description of Event"
          },
          "startTime": {
            "type": "integer",
            "format": "int64",
            "example": 1673034164
          },
          "endTime": {
            "type": "integer",
            "format": "int64",
            "example": 1683034164
          },
          "latitude": {
            "type": "string",
            "example": "40.4775315"
          },
          "longitude": {
            "type": "string",
            "example": "-3.7051359"
          },
          "placeSchema": {
            "type": "string",
            "example": "Seralized place schema"
          },
          "maxPlace": {
            "type": "integer",
            "format": "int64",
            "example": 2
          },
          "categoriesIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "example": [
                1,
                2,
                3
              ]
            },
            "minItems": 0
          }
        }
      },
      "EventPatch": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Short description of Event"
          },
          "name": {
            "type": "string",
            "example": "Long description of Event"
          },
          "startTime": {
            "type": "integer",
            "format": "int64",
            "example": 1673034164
          },
          "endTime": {
            "type": "integer",
            "format": "int64",
            "example": 1683034164
          },
          "latitude": {
            "type": "string",
            "example": "40.4775315"
          },
          "longitude": {
            "type": "string",
            "example": "-3.7051359"
          },
          "placeSchema": {
            "type": "string",
            "example": "Seralized place schema"
          },
          "maxPlace": {
            "type": "integer",
            "format": "int64",
            "example": 2
          },
          "categoriesIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "example": [
                1,
                2,
                3
              ]
            },
            "minItems": 0
          }
        }
      },
      "Place": {
        "type": "object",
        "required": [
          "id",
          "free"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 21
          },
          "free": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "Category": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Sport"
          }
        }
      },
      "EventStatus": {
        "type": "string",
        "description": "event status",
        "enum": [
          "inFuture",
          "pending",
          "done",
          "cancelled"
        ],
        "example": "done"
      },
      "ReservationDTO": {
        "type": "object",
        "required": [
          "eventId",
          "placeId",
          "reservationToken"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "placeId": {
            "type": "integer",
            "format": "int64",
            "example": 12
          },
          "reservationToken": {
            "type": "string",
            "example": "df0d69cbe68fb6e2b27aa88f6f94497e"
          }
        }
      },
      "Organizer": {
        "type": "object",
        "required": [
          "id",
          "name",
          "email",
          "status"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "theUser"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "status": {
            "type": "string",
            "description": "User Status",
            "enum": [
              "pending",
              "confirmed"
            ]
          }
        }
      },
      "OrganizerForm": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "theUser"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          }
        }
      },
      "OrganizerPatch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "NewUserName"
          },
          "password": {
            "type": "string",
            "example": "myNewPassword"
          }
        }
      }
    },
    "securitySchemes": {
      "token": {
        "type": "apiKey",
        "name": "sessionToken",
        "in": "header"
      }
    }
  }
}